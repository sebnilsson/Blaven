using System;

using Blaven.DataSources;

namespace Blaven
{
    public class BlavenBlogSetting<TBlogDataSource> : BlavenBlogSetting
        where TBlogDataSource : IDataSource
    {
        public BlavenBlogSetting(string blogKey)
            : base(blogKey)
        {
            this.GetBlogDataSourceFactory<TBlogDataSource>();
        }
    }

    /// <summary>
    /// Represents a Blog-setting.
    /// </summary>
    public class BlavenBlogSetting
    {
        public BlavenBlogSetting(string blogKey, Func<IDataSource> blogDataSourceFactory)
            : this(blogKey)
        {
            this.BlogDataSourceFactory = blogDataSourceFactory;
        }

        internal BlavenBlogSetting(string blogKey)
        {
            this.BlogKey = blogKey;
        }

        internal string DataSource { get; set; }

        internal string PasswordKey { get; set; }

        internal string UsernameKey { get; set; }

        /// <summary>
        /// The base-URL for the blog. Leave empty to use default value from the data-source.
        /// </summary>
        public string BaseUrl { get; set; }

        /// <summary>
        /// The unique identifier for the blog.
        /// </summary>
        public string BlogKey { get; set; }

        /// <summary>
        /// The data-source for the blog.
        /// </summary>
        public Func<IDataSource> BlogDataSourceFactory { get; internal set; }

        /// <summary>
        /// The ID of the blog at the data-source.
        /// </summary>
        public string DataSourceId { get; set; }

        /// <summary>
        /// The URI to the data-source. Will be resolved to correct URI from BlogId, if left empty.
        /// </summary>
        public string DataSourceUri { get; set; }

        /// <summary>
        /// The password for the account at the data-source.
        /// </summary>
        public string Password { get; internal set; }

        /// <summary>
        /// The username for the account at the data-source.
        /// </summary>
        public string Username { get; internal set; }

        internal void SetBlogDataSource(string dataSourceName)
        {
            string name = (dataSourceName ?? string.Empty).ToLowerInvariant();
            switch (name)
            {
                case "blogger":
                    this.BlogDataSourceFactory =
                        this.GetBlogDataSourceFactoryReflected("Blaven.DataSources.Blogger.BloggerDataSource");
                    break;
                case "github":
                    this.BlogDataSourceFactory =
                        this.GetBlogDataSourceFactoryReflected("Blaven.DataSources.GitHub.GitHubDataSource");
                    break;
                default:
                    throw new NotImplementedException(string.Format("No data-source implemented for {0}.", name));
            }
        }

        private Func<IDataSource> GetBlogDataSourceFactoryReflected(string typeName)
        {
            var type = Type.GetType(typeName);
            if (type == null)
            {
                throw new BlavenException(string.Format("No IBlogDataSource found for type-name '{0}'.", typeName));
            }

            var method = typeof(BlavenBlogSetting).GetMethod("GetDataSourceConstructor").MakeGenericMethod(type);
            return method.Invoke(null, null) as Func<IDataSource>;
        }

        internal Func<IDataSource> GetBlogDataSourceFactory<TDataSource>() where TDataSource : IDataSource
        {
            return () =>
                {
                    var type = typeof(TDataSource);
                    var instance = Activator.CreateInstance(type) as IDataSource;

                    if (instance == null)
                    {
                        throw new BlavenException(
                            string.Format(
                                "No IBlogDataSource could be instantiated for type-name '{0}'.", type.FullName));
                    }
                    return instance;
                };
        }
    }
}