{"Info":{"Categories":[{"Key":"Visual Studio 2010","Value":1},{"Key":"Assembly Reference","Value":1},{"Key":"Visual Studio","Value":2},{"Key":"JavaScript","Value":1},{"Key":"YUI","Value":1},{"Key":"YUI 2","Value":1},{"Key":"CSS","Value":1},{"Key":"HTML","Value":1},{"Key":"Google Chrome Extensions","Value":1},{"Key":"Twitter","Value":1},{"Key":"Instapaper","Value":1},{"Key":"Google Reader","Value":1},{"Key":"Google Chrome","Value":1},{"Key":"Guidelines","Value":1},{"Key":".NET","Value":7},{"Key":"IIS","Value":1},{"Key":"URI","Value":2},{"Key":"ASP.NET","Value":4},{"Key":"WebForms","Value":2},{"Key":"SEO","Value":2},{"Key":"Reference","Value":2},{"Key":"HttpRequest","Value":1},{"Key":"Dynamic","Value":1},{"Key":"C#","Value":3},{"Key":"DLR","Value":1},{"Key":"Conventions","Value":2},{"Key":"StyleCop","Value":1}],"FriendlyPermaLinks":["\/2011\/02\/blog-moved-to-professional-domain-and","\/2010\/09\/visual-studio-2010-dropped-assembly","\/2010\/09\/conditional-scrolling-banner-with-yui","\/2010\/08\/reading-productivity-in-google-chrome","\/2010\/08\/guidelines-for-uri-design","\/2010\/03\/aspnet-webforms-seo-compressing","\/2010\/03\/aspnet-webforms-seo-moving-view-state","\/2010\/02\/aspnet-request-paths-reference","\/2010\/02\/c-4-reflected-dynamics","\/2010\/02\/c-coding-style-conventions_12","\/2010\/02\/visual-studio-c-settings-stylecop"],"PostDates":[{"Key":"\/Date(1296514800000+0100)\/","Value":1},{"Key":"\/Date(1283292000000+0200)\/","Value":2},{"Key":"\/Date(1280613600000+0200)\/","Value":2},{"Key":"\/Date(1267398000000+0100)\/","Value":2},{"Key":"\/Date(1264978800000+0100)\/","Value":4}],"Subtitle":"Covering software-development with focus on .NET and C#.<br>\u000a<em>May also give you some JavaScript, jQuery, CSS and HTML.<\/em>","Title":"Seb Nilsson's Liquid Development","Updated":"\/Date(1330700629000+0100)\/"},"Posts":[{"Categories":[],"Content":"<p>\u000aI've made another step in the career and also trying to up the professional image by getting real top-level domain and hosting at Squarespace.\u000a<\/p>\u000a<p>\u000aThe content has also been duplicated to the new blog.\u000a<\/p>\u000a<p>\u000a<a href=\"http:\/\/www.sebnilsson.com\">You can now find me at sebnilsson.com<\/a>.\u000a<\/p>","FriendlyPermaLink":"\/2011\/02\/blog-moved-to-professional-domain-and","ID":"162187438876773466","Published":"\/Date(1297896180000+0100)\/","Title":"Blog moved to professional domain and Squarespace","Updated":"\/Date(1297896232000+0100)\/"},{"Categories":["Visual Studio 2010","Assembly Reference","Visual Studio"],"Content":"<p>\u000aAfter adding some references to external assemblies like to <a href=\"http:\/\/nlog-project.org\/\">NLog<\/a> or <a href=\"http:\/\/munq.codeplex.com\/\">Munq<\/a> I found out that on some projects Visual Studio 2010 had a tendency to drop the reference to some of these assemblies. <\/p>\u000a<p>\u000aAfter the usual searching of <a href=\"http:\/\/www.google.com\/\">Google<\/a> and <a href=\"http:\/\/stackoverflow.com\/\">Stackoverflow<\/a> I've put together a combination of different solutions that seems to solve this issue. <\/p>\u000a<ul>\u000a<li> Step 1: Expand your references and bring up the properties-window. Set <strong>Specific Version<\/strong> to <em>True<\/em>: <div>\u000a<a href=\"http:\/\/1.bp.blogspot.com\/_kk4EVuf9pOw\/TIdeCwKUsvI\/AAAAAAAAAF8\/dPAAThzOSjc\/s1600\/reference_1.png\"> <img height=\"320\" width=\"243\" src=\"http:\/\/1.bp.blogspot.com\/_kk4EVuf9pOw\/TIdeCwKUsvI\/AAAAAAAAAF8\/dPAAThzOSjc\/s320\/reference_1.png\" \/><\/a><\/div>\u000a<\/li>\u000a<li> Step 2: Right click on the project and click <strong>Untload Project<\/strong>: <div>\u000a<a href=\"http:\/\/2.bp.blogspot.com\/_kk4EVuf9pOw\/TIdgDAvHM_I\/AAAAAAAAAGE\/zyhfUHZqV5A\/s1600\/reference_4.png\"> <img height=\"48\" width=\"320\" src=\"http:\/\/2.bp.blogspot.com\/_kk4EVuf9pOw\/TIdgDAvHM_I\/AAAAAAAAAGE\/zyhfUHZqV5A\/s320\/reference_4.png\" \/> <\/a><\/div>\u000a<\/li>\u000a<li> Step 3: Right click again on the project and click <strong>Edit ...csproject<\/strong>. <\/li>\u000a<li> Step 4: Add an XML-element with the name <strong>SpecificVersion<\/strong> with the value <em>True<\/em> beneath the reference in question: <div>\u000a<a href=\"http:\/\/4.bp.blogspot.com\/_kk4EVuf9pOw\/TIdh3_OY-7I\/AAAAAAAAAGI\/Z4tCRWN2rv0\/s1600\/reference_3.png\"> <img height=\"112\" width=\"320\" src=\"http:\/\/4.bp.blogspot.com\/_kk4EVuf9pOw\/TIdh3_OY-7I\/AAAAAAAAAGI\/Z4tCRWN2rv0\/s320\/reference_3.png\" \/> <\/a><\/div>\u000a<\/li>\u000a<li> Step 5: Right click on the project and click <strong>Reload Project<\/strong>. <\/li>\u000a<\/ul>\u000a<p>\u000aThis works for me so far. <\/p>","FriendlyPermaLink":"\/2010\/09\/visual-studio-2010-dropped-assembly","ID":"1785997223452926105","Published":"\/Date(1283938140000+0200)\/","Title":"Visual Studio 2010: Dropped Assembly References Workaround","Updated":"\/Date(1330517760000+0100)\/"},{"Categories":["JavaScript","YUI","YUI 2","CSS","HTML"],"Content":"<p>I was in need of <b>a banner that would scroll along on the page, even when the user had scrolled passed it<\/b>. After Googling with Bing for any done JavaScript to achieve this, I still only found plug-ins for different PHP-based CMS:es. <\/p>  <p>After spending almost as much time searching for something already built as it would have taken to build it, I did just that, I took matters into my own hands. <\/p>  <p>In my case I solved it with Yahoo's <a href=\"http:\/\/developer.yahoo.com\/yui\/2\/\">YUI 2<\/a>, but you can do it just as well in any other Javascript-library, like <a href=\"http:\/\/jquery.com\/\">jQuery<\/a>.<\/p>  <pre class=\"brush: html\"><!-- Static banners above conditional scrolling one -->\u000a<div id=\"scrollBanner\" class=\"scrollBanner\">\u000a    <!-- Image and\/or flash-banners -->\u000a    <img src=\"Banner.gif\" alt=\"Banner\" \/>\u000a<\/div>\u000a<\/pre>\u000a\u000a<p>What we need to do is to find the element to scroll in the DOM and find it's initial Y-position. Then we add a listener to the <code>scroll<\/code>-event and just flip the CSS-class of the element, depending if we've scrolled past it or not. <\/p>\u000a\u000a<pre class=\"brush: javascript\">var scrollBanner = document.getElementById(\"scrollBanner\");\u000a\/\/ Initial banner Y-position\u000avar bannerYPos = YAHOO.util.Dom.getY(scrollBanner);\u000a\u000aYAHOO.util.Event.addListener(window, 'scroll',\u000a    function() {\u000a        var isBannerAboveScrollTop = (YAHOO.util.Dom.getDocumentScrollTop() > bannerYPos);\u000a        var oldClassName = isBannerAboveScrollTop ? \"scrollBanner\" : \"scrollBanner_fixed\";\u000a        var newClassName = isBannerAboveScrollTop ? \"scrollBanner_fixed\" : \"scrollBanner\";\u000a        YAHOO.util.Dom.replaceClass(scrollBanner, oldClassName, newClassName);\u000a    }\u000a);<\/pre>\u000a\u000a<p>Just style your <code>scrollingBanner_fixed<\/code>-class with a fixed position and the <code>width<\/code> you want it to have. Adjust the <code>top<\/code>-setting to set how high up on the screen the scrolling banner should be. You could also use <code>padding<\/code> to make the scrolling-experience more smooth. <\/p>\u000a\u000a<pre class=\"brush: css\">.scrollingBanner_fixed {\u000a    position: fixed;\u000a    top: 0px;\u000a    width: 100px;\u000a}<\/pre>\u000a\u000a<p>This code could of course also be used for good, to have some kind of toolbar that would scroll along on a page. <\/p>  ","FriendlyPermaLink":"\/2010\/09\/conditional-scrolling-banner-with-yui","ID":"3593553046595187211","Published":"\/Date(1283336100000+0200)\/","Title":"Conditional Scrolling Banner with YUI","Updated":"\/Date(1286874295000+0200)\/"},{"Categories":["Google Chrome Extensions","Twitter","Instapaper","Google Reader","Google Chrome"],"Content":"<p>\u000aI've found that Google Chrome is a big boost in reading-productivity. It helps me to consume and go through a lot more information in a much shorter time. This is enabled by some of my favorite <a href=\"https:\/\/chrome.google.com\/extensions\">Google Chrome Extensions<\/a>.\u000a<\/p>\u000a\u000a<h4>Twitter<\/h4>\u000a<p>\u000aThe first and most obvious flow of information to follow is <a href=\"http:\/\/twitter.com\/sebnilsson\">Twitter<\/a>, where I use the very popular <a href=\"http:\/\/chrome.google.com\/extensions\/detail\/encaiiljifbdbjlphpgpiimidegddhic\">Chromed Bird<\/a>.\u000a<\/p>\u000a<p>\u000a<img src=\"http:\/\/chrome.google.com\/extensions\/img\/encaiiljifbdbjlphpgpiimidegddhic\/1277231563.24\/screenshot\/1001\" class=\"right_image\" \/>\u000a<\/p>\u000a\u000a<h4>Google Reader<\/h4>\u000a<p>\u000aFor keeping up with subscribed RSS-feeds in <a href=\"http:\/\/www.google.com\/reader\">Google Reader <\/a> I use the highly visual and usable <a href=\"http:\/\/chrome.google.com\/extensions\/detail\/ddkahgkblobiogkkeedfnjkldecloidi\">FeedSquares<\/a>. I'll have to agree with their own description:\u000a<\/p>\u000a<blockquote>\u000aA refreshing way to experience Google Reader on Chrome. Read your favorite feeds in style.\u000a<\/blockquote>\u000a<p>\u000a<img src=\"http:\/\/chrome.google.com\/extensions\/img\/ddkahgkblobiogkkeedfnjkldecloidi\/1282014560.31\/screenshot\/11001\" \/>\u000a<\/p>\u000a\u000a<h4>Read later<\/h4>\u000a<p>\u000aThe best way to keep the amount of tabs in Chrome down so you can see the title is to use <a href=\"http:\/\/www.instapaper.com\">Instapaper<\/a> and mark articles to read later. To quickly manage this I use the extension <a href=\"http:\/\/chrome.google.com\/extensions\/detail\/fldildgghjoohccppflaohodcnmlacpb\">Instachrome<\/a>.\u000a<\/p>\u000a<blockquote>Collect articles on the web to read them later.<\/blockquote>\u000a<p>\u000a<img src=\"https:\/\/chrome.google.com\/extensions\/img\/fldildgghjoohccppflaohodcnmlacpb\/1280852458.01\/screenshot\/2001\" \/>\u000a<\/p>\u000a\u000a<h4>Webpage article readability<\/h4>\u000a<p>\u000aIf you read a lot of articles and blog, like I do, you will find that some are easier to read than other. This is very nicely solved with the extension called <a href=\"https:\/\/chrome.google.com\/extensions\/detail\/jggheggpdocamneaacmfoipeehedigia\">Readability Redux<\/a>.\u000a<\/p>\u000a<blockquote>Readability is a simple tool that makes reading on the Web more enjoyable by removing the cluter around what you're reading.<\/blockquote>\u000a<p>\u000a<img src=\"https:\/\/chrome.google.com\/extensions\/img\/jggheggpdocamneaacmfoipeehedigia\/1281548774.81\/screenshot\/1001\" \/>\u000a<\/p>\u000a\u000a<h4>Structured and powerful 'Undo close tab'<\/h4>\u000a<p>\u000aChrome supports the keyboard-shortcut CTRL+SHIFT+T (OSX: CMD+SHIFT+T) to undo a closing of a tab. You can also open a new empty tab to see some recently closed tabs. But the extension <a href=\"http:\/\/chrome.google.com\/extensions\/detail\/bcennaiejdjpomgmmohhpgnjlmpcjmbg\">Sexy Undo Close Tab<\/a> gives you a bit more structured overview and helps a lot if you close a lot of tabs.\u000a<\/p>\u000a<p>\u000a<img src=\"http:\/\/chrome.google.com\/extensions\/img\/bcennaiejdjpomgmmohhpgnjlmpcjmbg\/1279922823.43\/screenshot\/7001\" \/>\u000a<\/p>\u000a\u000a<h4>Finally<\/h4>\u000a<p>\u000aAll these extension really speeds up my pace of keeping up with social media, information and education. I'm sure I've missed some extensions and we can probably await some more upcoming nice ones.\u000a<\/p>","FriendlyPermaLink":"\/2010\/08\/reading-productivity-in-google-chrome","ID":"6366340091930738355","Published":"\/Date(1281716220000+0200)\/","Title":"Reading-productivity in Google Chrome","Updated":"\/Date(1282129099000+0200)\/"},{"Categories":["Guidelines",".NET","IIS","URI","ASP.NET"],"Content":"<p>\u000a<a href=\"http:\/\/jacobwg.com\/\">Jacob Gillespie<\/a> has worked on a post concerning <a href=\"http:\/\/forrst.com\/posts\/URL_Guidelines-m0F\">URL Guidelines<\/a>, that underwent much revision and was posted as a guest post on CSS-Tricks named <a href=\"http:\/\/css-tricks.com\/guidelines-for-uri-design\/\">Guidelines for URI Design<\/a>.\u000a<\/p>\u000a<blockquote>\u000aClean URIs are one component of a clean website, and it is an important one. The majority of end-user access to the Internet involves a URI, and whether or not the user actually enters the URI, they are working with one nonetheless.\u000a<\/blockquote>\u000a<p>\u000aHere is an outtake of the general principles of the article:\u000a<ul>\u000a<li>\u000a<strong>A URI must represent an object, uniquely and permanently<\/strong> - The URI must be unique so that it is a one-to-one match – one URI per one data object.\u000a<\/li>\u000a<li>\u000a<strong>Be as human-friendly as possible<\/strong> - URIs should be designed with the end user in mind. SEO and ease of development should come second.\u000a<\/li>\u000a<li>\u000a<strong>Consistency<\/strong> - URIs across a site must be consistent in format. Once you pick your URI structure, be consistent and follow it!\u000a<\/li>\u000a<li>\u000a<strong>“Hackable” URIs<\/strong> - Related to consistency, URIs should be structured so that they are intelligibly “hackable” or changeable.\u000a<\/li>\u000a<li>\u000a<strong>Keywords<\/strong> - The URI should be composed of keywords that are important to the content of the page. So, if the URI is for a blog post that has a long title, only the words important to the content of the page should be in the URI.\u000a<\/li>\u000a<\/ul>\u000a<\/p>\u000a<p>\u000aWhen it comes to technical details, here are their concerned bullet-points:\u000a<ul>\u000a<li>\u000a<strong>No WWW<\/strong> - The www. should be dropped from the website URI, as it is unnecessary typing and violates the rules of being as human-friendly as possible and not including unnecessary information in the URI.\u000a<\/li>\u000a<li>\u000a<strong>Format<\/strong> - Google News has some interesting requirements for webpages that want to be listed in the Google News results – Google requires at least a 3-digit unique number.\u000a<\/li>\u000a<li>\u000a<strong>All lowercase<\/strong> - All characters must be lowercase. Attempting to describe a URI to someone when mixed case is involved is next to impossible.\u000a<\/li>\u000a<li>\u000a<strong>URI identifiers should be made URI friendly<\/strong> - A URI might contain the title of a post, and that title might contain characters that are not URI-friendly. That post title must therefore be made URI friendly. [...] Spaces should be replaced with hyphens.\u000a<\/li>\u000a<\/ul>\u000a<\/p>\u000a<p>\u000a<a href=\"http:\/\/www.4guysfromrolla.com\/ScottMitchell.shtml\">Scott Mitchell<\/a> has written an article on 4GuysFromRolla.com about <a href=\"http:\/\/www.4guysfromrolla.com\/articles\/072810-1.aspx\">Techniques for Preventing Duplicate URLs in Your Website<\/a>.\u000a<\/p>\u000a<blockquote>A key tenet of search engine optimization is URL normalization, or URL canonicalization. URL normalization is the process of eliminating duplicate URLs in your website. This article explores four different ways to implement URL normalization in your ASP.NET website.<\/blockquote>\u000a<p>\u000aThe important subjects of this article are the following:\u000a<ul>\u000a<li>\u000a<strong>First Things First: Deciding on a Canonical URL Format<\/strong> - Before we examine techniques for normalizing URLs, and certainly before such techniques can be implemented, we must first decide on a canonical URL format.\u000a<\/li>\u000a<li>\u000a<strong>URL Normalization Using Permanent Redirects<\/strong> - [...] when a search engine spider receives a 301 status it updates its index with the new URL. Therefore, if anytime a request comes in for a non-canonical URL we immediately issue a permanent redirect to the same page but use the canonical form then a search engine spider crawling our site will only maintain the canonical form in its index.\u000a<\/li>\u000a<li>\u000a<strong>Issuing Permanent Redirects From ASP.NET<\/strong> - Every time an incoming request is handled by the ASP.NET engine, it raises the <em>BeginRequest<\/em> event. You can execute code in response to this event by creating an HTTP Module or by creating the <em>Application_BeginRequest<\/em> event handler in <em>Global.asax<\/em>.\u000a<\/li>\u000a<li>\u000a<strong>Rewriting URLs Into Canonical Form Using IIS 7's URL Rewrite Module<\/strong> - Shortly after releasing IIS 7, Microsoft created and released a free <a href=\"http:\/\/learn.iis.net\/page.aspx\/734\/url-rewrite-module\/\">URL Rewrite Module<\/a>. The URL Rewrite Module makes it easy to define URL rewriting rules in your <em>Web.config<\/em> file.\u000a<\/li>\u000a<li>\u000a<strong>Rewriting URLs Into Canonical Form Using ISAPI_Rewrite<\/strong> - Microsoft's URL Rewriter Module is a great choice if you are using IIS 7, but if you are using previous version of IIS you're out of luck.\u000a<\/li>\u000a<li>\u000a<strong>Telling Search Engine Spiders Your Canonical Form In Markup<\/strong> - Consider a URL that may include querystring parameters that don't affect the content rendered on the page or only affect non-essential parts of the page.<br\/>\u000aIn the case of YouTube, all video pages specify a <link> element like so, regardless of whether the querystring includes just the <em>videoId<\/em> or the <em>videoId<\/em> and other parameters:\u000a<pre class=\"brush: xhtml\">\u000a<link rel=\"canonical\" href=\"\/watch?v=videoId\">\u000a<\/pre>\u000a<\/li>\u000a<\/ul>\u000a<\/p>","FriendlyPermaLink":"\/2010\/08\/guidelines-for-uri-design","ID":"6101928863608892115","Published":"\/Date(1280887800000+0200)\/","Title":"Guidelines for URI Design","Updated":"\/Date(1280887921000+0200)\/"},{"Categories":[".NET","ASP.NET","WebForms","SEO"],"Content":"<p>\u000aIn my previous post about <a href=\"http:\/\/sebnilsson.blogspot.com\/2010\/03\/aspnet-webforms-seo-moving-view-state.html\">Moving View State to Bottom of the Form<\/a> I touched on one way to do some <a href=\"http:\/\/en.wikipedia.org\/wiki\/Search_engine_optimization\">Search Engine Optimization<\/a> in ASP.NET WebForms. Another thing you can do is to <b>compress large View States<\/b> on a page.\u000a<\/p>\u000a<p>\u000aAll the code in this article should be put in a class inheriting from <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.web.ui.page.aspx\">System.Web.UI.Page<\/a>. Like a page's Code-behind file or your own PageBase-class.\u000a<\/p>\u000a<p>\u000aFirst we need some common logic for both loading and saving a compressed View State, the name of the hidden field to use.\u000a<\/p>\u000a<pre class=\"brush: csharp\">\u000aprivate const string ViewStateFieldName = \"SEOVIEWSTATE\";\u000a<\/pre>\u000a<p>\u000aWe start with the loading-part, where you see the use of my implementation of the CompressionHelper-class, which simplifies compression. It also solves the issue with DeflateStream and GZipStream inflating already compressed data, <a href=\"http:\/\/blogs.msdn.com\/bclteam\/archive\/2009\/05\/22\/what-s-new-in-the-bcl-in-net-4-beta-1-justin-van-patten.aspx\">which is resolved in .NET Framework 4<\/a>.\u000a<\/p>\u000a<pre class=\"brush: csharp\">\u000aprotected override object LoadPageStateFromPersistenceMedium() {\u000a    return LoadCompressedPageState();\u000a}\u000a\u000aprivate object LoadCompressedPageState() {\u000a    string viewState = Request.Form[ViewStateFieldName];\u000a    if(string.IsNullOrEmpty(viewState)) {\u000a        return string.Empty;\u000a    }\u000a\u000a    byte[] bytes = Convert.FromBase64String(viewState.Substring(1));\u000a\u000a    bool isCompressed = Convert.ToBoolean(Convert.ToInt32(viewState.Substring(0, 1)));\u000a    if(isCompressed) {\u000a        bytes = CompressionHelper.Decompress(bytes);\u000a    }\u000a\u000a    string decompressedBase64 = Convert.ToBase64String(bytes);\u000a\u000a    ObjectStateFormatter formatter = new ObjectStateFormatter();\u000a    return formatter.Deserialize(decompressedBase64);\u000a}\u000a<\/pre>\u000a<p>\u000aWe then move on to the implementation of saving the page's state.\u000a<\/p>\u000a<pre class=\"brush: csharp\">\u000aprotected override void SavePageStateToPersistenceMedium(object state) {\u000a    SaveCompressedPageState(state);\u000a}\u000a\u000aprivate void SaveCompressedPageState(object state) {\u000a    byte[] viewStateBytes;\u000a    using(MemoryStream stream = new MemoryStream()) {\u000a        ObjectStateFormatter formatter = new ObjectStateFormatter();\u000a        formatter.Serialize(stream, state);\u000a        viewStateBytes = stream.ToArray();\u000a    }\u000a\u000a    byte[] compressed;\u000a    bool successfulCompress = CompressionHelper.TryCompress(viewStateBytes, out compressed);\u000a    string compressedBase64 =\u000a        Convert.ToInt32(successfulCompress) + Convert.ToBase64String(compressed);\u000a\u000a    ClientScript.RegisterHiddenField(ViewStateFieldName, compressedBase64);\u000a}\u000a<\/pre>\u000a<p>\u000aSo the summary is that this will compress the View State of an ASP.NET WebForms page, if the View State is large enough. Otherwise it will just keep it the way it is.\u000a<\/p>","FriendlyPermaLink":"\/2010\/03\/aspnet-webforms-seo-compressing","ID":"2418007696780939579","Published":"\/Date(1270029000000+0200)\/","Title":"ASP.NET WebForms SEO - Compressing View State","Updated":"\/Date(1270764926000+0200)\/"},{"Categories":[".NET","ASP.NET","WebForms","SEO"],"Content":"<p>\u000aAs we all know, <a href=\"http:\/\/en.wikipedia.org\/wiki\/Search_engine_optimization\">SEO<\/a> is very important for almost all sites and some of us are still stuck with sites based on <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/ms973868.aspx\">ASP.NET WebForm<\/a>. But there are still things you can do to optimize these sites.\u000a<\/p>\u000a<p>\u000aSince <a href=\"http:\/\/articles.sitepoint.com\/article\/indexing-limits-where-bots-stop\">Google and other search-engines only indexes X amount of KB of a page<\/a>, you don't want half of that content to be meaningless <a href=\"http:\/\/weblogs.asp.net\/infinitiesloop\/archive\/2006\/08\/03\/Truly-Understanding-Viewstate.aspx\">View State (<em>which you should TRULY understand by now<\/em>)<\/a>.\u000a<\/p>\u000a<p>\u000aOne solution is to <a href=\"http:\/\/sebnilsson.blogspot.com\/2010\/03\/aspnet-webforms-seo-compressing.html\">compress the View State<\/a>, but in this article I will show you how to move it to the bottom of the <a href=\"http:\/\/www.w3schools.com\/TAGS\/tag_form.asp\">Form-tag<\/a>. To achieve the latter, I will use a <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/zec9k340(VS.71).aspx\">HttpModule<\/a>, which will intercept all requests to files served through ASP.NET in the IIS.\u000a<\/p>\u000a<p>\u000aFirst we need to hook in to the <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.web.httpapplication.beginrequest.aspx\">BeginRequest<\/a>-event to only intercept requests to <b>.aspx<\/b>-pages.\u000a<\/p>\u000a<pre class=\"brush: csharp\">\u000apublic class ViewStateSeoHttpModule : IHttpModule {\u000a    public void Init(HttpApplication context) {\u000a        context.BeginRequest += new EventHandler(BeginRequest);\u000a    }\u000a\u000a    private void BeginRequest(object sender, EventArgs e) {\u000a        HttpApplication application = sender as HttpApplication;\u000a\u000a        bool isAspNetPageRequest = GetIsAspNetPageRequest(application);\u000a        if(isAspNetPageRequest) {\u000a            application.Context.Response.Filter =\u000a                new ViewStateSeoFilter(application.Context.Response.Filter);\u000a        }\u000a    }\u000a\u000a    private bool GetIsAspNetPageRequest(HttpApplication application) {\u000a        string requestInfo = application.Context.Request.Url.Segments.Last();\u000a        bool isAspNetPageRequest = requestInfo.ToLowerInvariant().Contains(\".aspx\");\u000a        return isAspNetPageRequest;\u000a    }\u000a    \/\/ [...]\u000a<\/pre>\u000a<p>\u000aWhat we do here is add a Reponse Filter which moves the View State to the bottom of the Form. I made this to an internal class called <strong>ViewStateSeoFilter<\/strong>.\u000a<\/p>\u000a<pre class=\"brush: csharp\">\u000ainternal class ViewStateSeoFilter : Stream {\u000a    private string _topPageHiddenFields;\u000a    private Stream _originalFilter;\u000a\u000a    public ViewStateSeoFilter(Stream originalFilter) {\u000a        _originalFilter = originalFilter;\u000a    }\u000a\u000a    public override bool CanRead { get { return true; } }\u000a    public override bool CanSeek { get { return true; } }\u000a    public override bool CanWrite { get { return true; } }\u000a    public override long Length { get { return 0; } }\u000a    public override long Position { get; set; }\u000a\u000a    public override void Flush() {\u000a        _originalFilter.Flush();\u000a    }\u000a\u000a    public override int Read(byte[] buffer, int offset, int count) {\u000a        return _originalFilter.Read(buffer, offset, count);\u000a    }\u000a\u000a    public override long Seek(long offset, SeekOrigin origin) {\u000a        return _originalFilter.Seek(offset, origin);\u000a    }\u000a\u000a    public override void SetLength(long value) {\u000a        _originalFilter.SetLength(value);\u000a    }\u000a    public override void Close() {\u000a        _originalFilter.Close();\u000a    }\u000a\u000a    public override void Write(byte[] buffer, int offset, int count) {\u000a        byte[] data = new byte[count];\u000a        Buffer.BlockCopy(buffer, offset, data, 0, count);\u000a        string html = Encoding.Default.GetString(buffer);\u000a\u000a        html = ExtractPageTopHiddenFields(html);\u000a        html = InsertExtractedHiddenFields(html);\u000a\u000a        byte[] outdata = Encoding.Default.GetBytes(html);\u000a        _originalFilter.Write(outdata, 0, outdata.GetLength(0));\u000a    }\u000a\u000a    private string ExtractPageTopHiddenFields(string html) {\u000a        int formStartIndex = html.IndexOf(\"<form\");\u000a        if(formStartIndex < 0) {\u000a            return html;\u000a        }\u000a\u000a        int divStartOpenIndex = html.IndexOf(\"<div\", formStartIndex);\u000a        if(divStartOpenIndex < 0) {\u000a            return html;\u000a        }\u000a        int divStartCloseIndex = html.IndexOf(\">\", divStartOpenIndex);\u000a        int divStartLenght = divStartCloseIndex - divStartOpenIndex;\u000a        int divEndOpenIndex = html.IndexOf(\"<\/div\", divStartOpenIndex);\u000a        int divEndCloseIndex = html.IndexOf(\">\", divEndOpenIndex);\u000a\u000a        int divContentLength = divEndOpenIndex - divStartCloseIndex - 1;\u000a\u000a        _topPageHiddenFields = html.Substring(divStartCloseIndex + 1, divContentLength);\u000a        html = html.Remove(divStartOpenIndex, divEndCloseIndex - divStartOpenIndex + 1);\u000a        return html;\u000a    }\u000a\u000a    private string InsertExtractedHiddenFields(string html) {\u000a        if(string.IsNullOrEmpty(_topPageHiddenFields)) {\u000a            return html;\u000a        }\u000a\u000a        int insertIndex = html.IndexOf(\"<\/form>\");\u000a        if(insertIndex > 0) {\u000a            html = html.Insert(insertIndex, _topPageHiddenFields + Environment.NewLine);\u000a            _topPageHiddenFields = null;\u000a        }\u000a\u000a        return html;\u000a    }\u000a}\u000a<\/pre>\u000a<p>\u000aOne bonus is that it moves all available <a href=\"http:\/\/www.w3schools.com\/TAGS\/tag_input.asp\">Hidden Input HTML-tags<\/a> controlled by ASP.NET to the bottom of the Form-tag. It seems to skip the Hidden Input that handles <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.web.ui.page.enableeventvalidation.aspx\">EventValidation<\/a>, which is a good thing, because ASP.NET seems to want this tag early in the <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/ms178472.aspx\">Page Life Cycle<\/a>.\u000a<\/p>","FriendlyPermaLink":"\/2010\/03\/aspnet-webforms-seo-moving-view-state","ID":"1550640740845257172","Published":"\/Date(1269946320000+0200)\/","Title":"ASP.NET WebForms SEO - Moving View State to Bottom of the Form","Updated":"\/Date(1270029094000+0200)\/"},{"Categories":["Reference","HttpRequest",".NET","URI","ASP.NET"],"Content":"<p>\u000aI decided to write down and document for myself the different paths provided by ASP.NET, to get a grip on the subject and a reference to turn to.\u000a<\/p>\u000a<p>\u000aThe path I will be requesting is:<br \/>\u000a<strong>http:\/\/www.myurl.com\/MyApplication\/MyFolder\/MyPage.aspx?QueryStringKey=QueryStringValue<\/strong>\u000a<\/p>\u000a<p>\u000aThis will be an ASP.NET-application named <strong>MyApplication<\/strong> in the IIS.\u000a<\/p>\u000a<p>\u000aHere is the result returned by the <strong>Request<\/strong>-property of the page, which is a <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.web.httprequest_properties.aspx\">HttpRequest<\/a>.\u000a<\/p>\u000a<ul>\u000a<li>\u000a   <strong>Request.<a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.web.httprequest.applicationpath.aspx\">ApplicationPath<\/a>:<\/strong> \/MyApplication<br \/>\u000a   <em>Gets the ASP.NET application's virtual application root path on the server.<\/em>\u000a<\/li>\u000a<li>\u000a   <strong>Request.<a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.web.httprequest.apprelativecurrentexecutionfilepath.aspx\">AppRelativeCurrentExecutionFilePath<\/a>:<\/strong> ~\/MyFolder\/MyPage.aspx<br \/>\u000a   <em>Gets the virtual path of the application root and makes it relative by using the tilde (~) notation for the application root (as in \"~\/page.aspx\").<\/em>\u000a<\/li>\u000a<li>\u000a   <strong>Request.<a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.web.httprequest.currentexecutionfilepath.aspx\">CurrentExecutionFilePath<\/a>:<\/strong> \/MyApplication\/MyFolder\/MyPage.aspx<br \/>\u000a   <em>Gets the virtual path of the current request.<\/em>\u000a<\/li>\u000a<li>\u000a   <strong>Request.<a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.web.httprequest.filepath.aspx\">FilePath<\/a>:<\/strong> \/MyApplication\/MyFolder\/MyPage.aspx<br \/>\u000a   <em>Gets the virtual path of the current request.<\/em>\u000a<\/li>\u000a<li>\u000a   <strong>Request.<a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.web.httprequest.path.aspx\">Path<\/a>:<\/strong> \/MyApplication<br \/>\u000a   <em>Gets the virtual path of the current request.<\/em>\u000a<\/li>\u000a<li>\u000a   <strong>Request.<a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.web.httprequest.pathinfo.aspx\">PathInfo<\/a>:<\/strong> <br \/>\u000a   <em>Gets additional path information for a resource with a URL extension.<\/em>\u000a<\/li>\u000a<li>\u000a   <strong>Request.<a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.web.httprequest.physicalapplicationpath.aspx\">PhysicalApplicationPath<\/a>:<\/strong> C:\\Visual Studio Projects\\MyApplication\\<br \/>\u000a   <em>Gets the physical file system path of the currently executing server application's root directory.<\/em>\u000a<\/li>\u000a<li>\u000a   <strong>Request.<a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.web.httprequest.physicalpath.aspx\">PhysicalPath<\/a>:<\/strong> C:\\Visual Studio Projects\\MyApplication\\MyFolder\\MyPage.aspx<br \/>\u000a   <em>Gets the physical file system path corresponding to the requested URL.<\/em>\u000a<\/li>\u000a<li>\u000a   <strong>Request.<a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.web.httprequest.rawurl.aspx\">RawUrl<\/a>:<\/strong> \/MyApplication\/MyFolder\/MyPage.aspx?QueryStringKey=QueryStringValue<br \/>\u000a   <em>Gets the ASP.NET application's virtual application root path on the server.<\/em>\u000a<\/li>\u000a<\/ul>\u000a<p>\u000aThen there is the property <strong>Request.<a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.web.httprequest.url.aspx\">Url<\/a><\/strong> that returns a <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.uri_properties.aspx\">System.Uri<\/a>, with all its properties. This is an interesting thing to explore as well.\u000a<\/p>\u000a<ul>\u000a<li>\u000a   <strong>Request.Url.<a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.uri.absolutepath.aspx\">AbsolutePath<\/a>:<\/strong> \/MyApplication\/MyFolder\/MyPage.aspx<br \/>\u000a   <em>Gets the absolute path of the URI.<\/em>\u000a<\/li>\u000a<li>\u000a   <strong>Request.Url.<a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.uri.absoluteuri.aspx\">AbsoluteUri<\/a>:<\/strong> http:\/\/www.myurl.com\/MyApplication\/MyFolder\/MyPage.aspx?QueryStringKey=QueryStringValue<br \/>\u000a   <em> Gets the absolute URI.<\/em>\u000a<\/li>\u000a<li>\u000a   <strong>Request.Url.<a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.uri.dnssafehost.aspx\">DnsSafeHost<\/a>:<\/strong> www.myurl.com<br \/>\u000a   <em> Gets an unescaped host name that is safe to use for DNS resolution.<\/em>\u000a<\/li>\u000a<li>\u000a   <strong>Request.Url.<a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.uri.host.aspx\">Host<\/a>:<\/strong> www.myurl.com<br \/>\u000a   <em>Gets the host component of this instance.<\/em>\u000a<\/li>\u000a<li>\u000a   <strong>Request.Url.<a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.uri.localpath.aspx\">LocalPath<\/a>:<\/strong> \/MyApplication\/MyFolder\/MyPage.aspx<br \/>\u000a   <em> Gets a local operating-system representation of a file name. <\/em>\u000a<\/li>\u000a<li>\u000a   <strong>Request.Url.<a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.uri.originalstring.aspx\">OriginalString<\/a>:<\/strong> http:\/\/www.myurl.com:80\/MyApplication\/MyFolder\/MyPage.aspx?QueryStringKey=QueryStringValue<br \/>\u000a   <em>Gets the original URI string that was passed to the Uri constructor.<\/em>\u000a<\/li>\u000a<li>\u000a   <strong>Request.Url.<a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.uri.pathandquery.aspx\">PathAndQuery<\/a>:<\/strong> \/MyApplication\/MyFolder\/MyPage.aspx?QueryStringKey=QueryStringValue<br \/>\u000a   <em>Gets the AbsolutePath and Query properties separated by a question mark (?).<\/em>\u000a<\/li>\u000a<li>\u000a   <strong>Request.Url.<a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.uri.query.aspx\">Query<\/a>:<\/strong> ?QueryStringKey=QueryStringValue<br \/>\u000a   <em>Gets any query information included in the specified URI.<\/em>\u000a<\/li>\u000a<li>\u000a   <strong>Request.Url.<a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.uri.tostring.aspx\">ToString()<\/a>:<\/strong> http:\/\/www.myurl.com\/MyApplication\/MyFolder\/MyPage.aspx?QueryStringKey=QueryStringValue<br \/>\u000a   <em>Gets a canonical string representation for the specified Uri instance.<\/em>\u000a<\/li>\u000a<\/ul>\u000a<p>Request also has the property <strong>Request.<a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.web.httprequest.urlreferrer.aspx\">UrlReferrer<\/a><\/strong> which is of the type <strong>System.Uri<\/strong> and has the same properties as <strong>Request.Url<\/strong>. It has the following description: <em>Gets information about the URL of the client's previous request that linked to the current URL.<\/em><\/p>","FriendlyPermaLink":"\/2010\/02\/aspnet-request-paths-reference","ID":"1034704727848676497","Published":"\/Date(1266318180000+0100)\/","Title":"ASP.NET Request paths reference","Updated":"\/Date(1266332877000+0100)\/"},{"Categories":["Dynamic",".NET","C#","DLR"],"Content":"<p>In Scott Hanselman's blog-entry titled <a href=\"http:\/\/www.hanselman.com\/blog\/BackToBasicsC4MethodOverloadingAndDynamicTypes.aspx\">Back to Basics: C# 4 method overloading and dynamic types<\/a>, Scott talks about method-overloads in C# 4 and the <em>dynamic<\/em>-keyword.<br \/>\u000a<\/p><pre class=\"brush: csharp\">class Program {\u000a    static void f(Int32 x) { }\u000a    static void f(dynamic x) {}\u000a    static void f(Int32 x, dynamic y) {}\u000a    static void f(dynamic x, Int32 y) {}\u000a    static void f(Int32 x, dynamic y, Int32 z) {}\u000a    static void f(dynamic x, Int32 y, dynamic z) {}\u000a    static void Main(string[] args) {\u000a        f(10); \/\/ Works - obvious\u000a        f(10, 10); \/\/ Ambiguous - obvious\u000a        f(10, 10, 10); \/\/ Ambiguous - not so obvious - since it should be possible to resolve\u000a    }\u000a}\u000a<\/pre><blockquote><p>...the behavior is totally by design:<\/p><ul><li><em>dynamic<\/em> in method signatures doesn’t come into it: it behaves like System.Object does.<\/li>\u000a<li>Given that, neither of the ternary signatures is better because each fits better than the other on some arguments (Int32 fits 10 better than object does)<\/li>\u000a<\/ul><p>The key point here, in bold, because it's significant is: <strong>having the type dynamic means \"use my runtime type for binding\".<\/strong><\/p><\/blockquote><p>It all becomes very clear when <a href=\"http:\/\/www.red-gate.com\/products\/reflector\/\">Reflector<\/a> is used on the code. This loosens up some thought-patterns and makes it easier to really understand the <em>dynamic<\/em>-keyword.<br \/>\u000a<\/p><blockquote><p>Another way to look at this is with Reflector. This C# code:<\/p><pre class=\"brush: csharp\">static void f(Int32 x, dynamic y, Int32 z) {}\u000a<\/pre><p>is essentially this, from a method signature point of view:<\/p><pre class=\"brush: csharp\">static void f(int x, [Dynamic] object y, int z) {}\u000a<\/pre><p>and if there was a method that returned dynamic, it'd look like this:<\/p><pre class=\"brush: csharp\">[return: Dynamic]\u000aprivate static object GetCalculator() {}\u000a<\/pre><\/blockquote>","FriendlyPermaLink":"\/2010\/02\/c-4-reflected-dynamics","ID":"3606382878790521957","Published":"\/Date(1266243180000+0100)\/","Title":"C# 4: Reflected Dynamics","Updated":"\/Date(1266243415000+0100)\/"},{"Categories":["Reference",".NET","Conventions","C#"],"Content":"<p>From the book <a href=\"http:\/\/www.amazon.com\/gp\/product\/0321545613?ie=UTF8&tag=liquiddevelo-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0321545613\">Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries (2nd Edition)<\/a>.<\/p>\u000a<p>\u000aI write this blog post as reference for myself and others. It's a summarized version of the chapter named '<strong>C# coding style conventions<\/strong>' in above named book.\u000a<\/p>\u000a<strong><em>\u000aGeneral Style Conventions<\/strong><\/em><br \/>\u000a<strong><br \/>\u000aBrace usage<\/strong>\u000a<p><strong>DO<\/strong> place the opening brace at the end of the preceding statement.<\/p><p><strong>DO<\/strong> align the closing brace with the beginning of the line containing the corresponding opening brace, unless closing a single-statement block.<\/p><p><strong>DO<\/strong> place the closing brace at the beginning of a new line.<\/p><pre class=\"brush: csharp\">if(someExpression){\u000a    DoSomething();\u000a}\u000a<\/pre><p><strong>CONSIDER<\/strong> single statement blocks that have braces that begin and end on the same line. Property accessors often use this style.<\/p><pre class=\"brush: csharp\">public int Foo{\u000a    get{ return foo; }\u000a    set{ foo = value; }\u000a}\u000a<\/pre><p><strong>CONSIDER<\/strong> single accessor properties having all brackets on the same line.<\/p><pre class=\"brush: csharp\">public int Foo{ get { return foo; } }\u000a<\/pre><p><strong>DO<\/strong> place the closing brace on its own line, unless followed by an <em>else<\/em>, <em>else if<\/em> or <em>while<\/em> statement.<\/p><pre class=\"brush: csharp\">if(someExpression){\u000a    do{\u000a        DoSomething();\u000a    } while(someOtherCondition);\u000a}\u000a<\/pre><p><strong>AVOID<\/strong> omitting braces, even if the language allows it.<\/p><p>Braces should not be considered optional. Even for single statement blocks, you should use braces. This increases code readability and maintainability.<\/p><pre class=\"brush: csharp\">for(int i=0; i<100; i++){ DoSomething(i); }\u000a<\/pre><p>There are very limited cases when omitting braces might be acceptable, such as when adding a new statement after an existing single-line statement is either impossible or extremely rare. For example, it is meaningless to add a statement after a <em>throw<\/em> statement.<\/p><pre class=\"brush: csharp\">if(someExpression) throw new ArgumentOutOfRangeException(...);\u000a<\/pre><p>Another exception to the rule is braces in <em>case<\/em> statements. These braces can be omitted as the <em>case<\/em> and <em>break<\/em> statements indicate the beginning and the end of the block.<\/p><pre class=\"brush: csharp\">case 0:\u000a    DoSomething();\u000abreak;\u000a<\/pre><strong><br \/>\u000aSpace Usage<\/strong><br \/>\u000a<p><strong>DO<\/strong> use one space after the opening and before the closing of braces.<\/p><pre class=\"brush: csharp\">public int Foo{ get{ return foo; } }\u000a<\/pre><p><strong>AVOID<\/strong> using space before the opening braces.<\/p><pre class=\"brush: csharp\">Preferred:  if(someExpression){\u000aAcceptable: if(someExpression) {\u000a<\/pre><p><strong>DO<\/strong> use a single space after a comma between parameters.<\/p><pre class=\"brush: csharp\">Right: public void Foo(char bar, int x, int y)\u000aWrong: public void Foo(char bar,int x,int y)\u000a<\/pre><p><strong>AVOID<\/strong> using space between arguments.<\/p><pre class=\"brush: csharp\">Preferred:  Foo(myChar,0,1)\u000aAcceptable: Foo(myChar, 0, 1)\u000a<\/pre><p><strong>AVOID<\/strong> using spaces after the opening or before the closing parentheses.<\/p><pre class=\"brush: csharp\">Preferred:  Foo(myChar,0,1)\u000aAcceptable: Foo( myChar,0,1 )\u000a<\/pre><p><strong>DO NOT<\/strong> use space between a member name and opening parenthesis.<\/p><pre class=\"brush: csharp\">Right: Foo()\u000aWrong: Foo ()\u000a<\/pre><p><strong>DO NOT<\/strong> use spaces after or before the brackets.<\/p><pre class=\"brush: csharp\">Right: x = dataArray[index];\u000aWrong: x = dataArray[ index ];\u000a<\/pre><p><strong>DO NOT<\/strong> use spaces before flow control statements.<\/p><pre class=\"brush: csharp\">Right: while(x==y)\u000aWrong: while (x==y)\u000a<\/pre><p><strong>AVOID<\/strong> using space before and after binary operators.<\/p><pre class=\"brush: csharp\">Preferred:  if(x==y){ ... }\u000aAcceptable: if(x == y){ ... }<\/pre><p><strong>DO NOT<\/strong> use space before or after unary operators.<\/p><pre class=\"brush: csharp\">Right: if(!y){ ... }\u000aWrong: if(! y){ ... }\u000a<\/pre><strong><br \/>\u000aIndent Usage<\/strong><br \/>\u000a<p><strong>DO<\/strong> use 4 consecutive space characters for indents.<\/p><p><strong>DO NOT<\/strong> use the tab character for indents<\/p><p><strong>DO<\/strong> indent contents of code blocks.<\/p><pre class=\"brush: csharp\">if(someExpression){\u000a    DoSomething();\u000a}\u000a<\/pre><p><strong>DO <\/strong> indent case blocks even if not using braces.<\/p><pre class=\"brush: csharp\">switch(someExpression){\u000a    case 0:\u000a        DoSomething();\u000a    break;\u000a        ...\u000a}\u000a<\/pre><strong><br \/>\u000aOther<\/strong><br \/>\u000a<p><strong>CONSIDER<\/strong> using the <em>var<\/em> keyword whenever the resulting type of the variable is obvious. Avoid using it if it decreases readability.<\/p><pre class=\"brush: csharp\">var names = new List<string>(); \/\/ good usage of var\u000a\u000astring source = GetSource();\u000avar tokens = source.Split(' '); \/\/ ok; most developers know String.Split\u000a\u000avar id = GetId(); \/\/ probably not good; it's not clear what the type if id is\u000a<\/pre><strong><em><br \/>\u000aNaming Conventions<\/strong><\/em><br \/>\u000a<p>In general, we recommend following the Framework Design Guidelines for naming identifiers. However, there are some additional conventions and exceptions to using the Framework Design Guidelines for naming internal and private identifiers.<\/p><p><strong>DO<\/strong> follow the Framework Design Guidelines for naming identifiers, except for naming private and internal fields.<\/p><p><strong>DO<\/strong> use PascalCasing for namespace, type, and member names, except for internal and private fields.<\/p><p><strong>DO<\/strong> use camelCasing for private and internal fields.<\/p><p><strong>DO<\/strong> use camelCasing for local variables.<\/p><p><strong>DO<\/strong> use camelCasing for parameters.<\/p><p><strong>DO NOT<\/strong> use Hungarian notation (i.e., do not encode the type of a variable in its name).<\/p><p><strong>AVOID<\/strong> prefixing local variables.<\/p><p><strong>DO<\/strong> use C# aliases instead of Framework type names. For example, use <em>int<\/em> instead of <em>Int32<\/em> and <em>object<\/em> instead of <em>Object<\/em>.<\/p><strong><br \/>\u000aComments<\/strong><br \/>\u000a<p>Comments should be used to describe the intent, algorithmic overview, and logical flow. It would be ideal, if from reading the comments alone, someone other than the author could understand the function's behavior and purpose. Although there are no minimum comment requirements and certainly some very small routines need no commenting at all, it is desirable for most routines to have comments reflecting the programmer's intent and approach.<\/p><p><strong>DO NOT<\/strong> use comments unless they describe something not obvious to someone other than the developer who wrote the code.<\/p><p><strong>AVOID<\/strong> multiline syntax (\/* --- *\/) for comments. The single-line syntax (\/\/ ...) is preferred even when a comment spans multiple lines.<\/p><p><strong>DO NOT<\/strong> place comments at the end of a line unless the comment is very short.<\/p><pre class=\"brush: csharp\">\/\/Avoid\u000apublic class ArrayList {\u000a    private int count; \/\/ -1 indicates uninitialized array\u000a}\u000a<\/pre><strong><br \/>\u000aFile Organization<\/strong><br \/>\u000a<p><strong>DO NOT<\/strong> have more than one public type in a source file, unless they differ only in the number of generic parameters or one is nested in the other.<br \/>\u000aMultiple internal types is one file are allowed.<\/p><p><strong>DO<\/strong> name the source file with the name of the public type it contains. For example, <em>String<\/em> class should be in String,cs file and <em>List<T><\/em> class should be in List.cs file.<\/p><p><strong>DO<\/strong> organize the directory hierarchy just like the namespace hierarchy. For example, the source file for <em>System.Collections.Generic.List<T><\/em> should be in the System\\Collections\\Generic directory.<\/p><p><strong>CONSIDER<\/strong> grouping members into the following sections in the specified order:<\/p><ul><li>All fields<\/li>\u000a<li>All constructors<\/li>\u000a<li>Public and protected properties<\/li>\u000a<li>Methods<\/li>\u000a<li>Events<\/li>\u000a<li>All explicit interface implementations<\/li>\u000a<li>Internal members<\/li>\u000a<li>Private members<\/li>\u000a<li>All nested types<\/li>\u000a<\/ul><p><strong>DO<\/strong> use <em>#region<\/em> blocks around not publicly callable and explicit interface implementation groups.<\/p><pre class=\"brush: csharp\">#region internal members\u000a...\u000a#endregion\u000a#region private members\u000a...\u000a#endregion\u000a<\/pre><p><strong>CONSIDER<\/strong> organizing members of each group in alphabetical order.<\/p><p><strong>CONSIDER<\/strong> organizing overloads from the simplest to the most complex.<\/p><p><strong>DO<\/strong> place the <em>using<\/em> directives outside the namespace declaration<\/p><pre class=\"brush: csharp\">using System;\u000a\u000anamespace System.Collections{\u000a    ...\u000a}\u000a<\/pre><strong><em><br \/>\u000aOwn additions<\/strong><\/em><br \/>\u000a<p><strong>DO<\/strong> place namespaces that are not included in .NET Framework on their own separate lines below the .NET Framework namespaces and all in alphabetical order.<\/p><pre class=\"brush: csharp\">using System;\u000ausing System.Collections;\u000ausing System.Collections.Generic;\u000ausing System.Xml;\u000a\u000ausing MyNamespace;\u000ausing MyNamespace.SubNamespace;\u000a...\u000a<\/pre>","FriendlyPermaLink":"\/2010\/02\/c-coding-style-conventions_12","ID":"8756699703988673880","Published":"\/Date(1265986680000+0100)\/","Title":"C# coding style conventions","Updated":"\/Date(1266520690000+0100)\/"},{"Categories":[".NET","Conventions","C#","Visual Studio","StyleCop"],"Content":"<p><a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/ms229042.aspx\">Design Guidelines<\/a> for .NET development is something very close and dear to me. Partially for my own sake, but mostly to have consistency across a company, between friends and maybe even across blog-examples.<br \/>\u000a<\/p><p><a href=\"http:\/\/code.msdn.microsoft.com\/sourceanalysis\">The tool StyleCop<\/a> is Microsoft's tool for enforcing these guidelines.<br \/>\u000a<\/p><blockquote>StyleCop analyzes C# source code to enforce a set of style and consistency rules. It can be run from inside of Visual Studio or integrated into an MSBuild project.<br \/>\u000a<\/blockquote><p>After asking a question <a href=\"http:\/\/stackoverflow.com\/questions\/325330\/visual-studio-c-settings-and-stylecop-ms-source-analysis\">Visual Studio C#-settings and StyleCop (MS Source Analysis)<\/a> on <a href=\"http:\/\/stackoverflow.com\/\">Stackoverflow<\/a> I set out to try to get C# in Visual Studio to behave as compliant as possible.<br \/>\u000a<\/p><p>The result after some testing around was <a href=\"http:\/\/sites.google.com\/site\/snblogfiles\/Csharp-Settings-2009-12-01.zip\">this Visual Studio settings file<\/a>. You can <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/ms165479.aspx\">easily import<\/a> these settings to your own Visual Studio.<br \/>\u000a<\/p><p>It's mainly about <strong>placements of parentheses and curly-braces<\/strong>.<br \/>\u000a<\/p><p>Yes, it can be a bit of a hassle to get used to having the curly-braces on the same line as the namespace-declaration, the class-declaration and method-declaration, but it saves some space and I got used to it quiet quickly and now have problems going back.<br \/>\u000a<\/p><pre class=\"brush: csharp\">namespace TestApp {\u000a    public class TestObject {\u000a        static TestObject() {\u000a            if(true) {\u000a                DoSomething();\u000a                DoSomething2();\u000a            } else {\u000a                DoSomethingElse()\u000a            }\u000a        }\u000a    }\u000a}\u000a<\/pre><p>This is as close as I can get to the conventions. It's worth to note that StyleCop can differ a bit from the book <a href=\"http:\/\/www.amazon.com\/gp\/product\/0321545613?ie=UTF8&tag=liquiddevelo-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0321545613\">Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries<\/a>.<br \/>\u000a<\/p>","FriendlyPermaLink":"\/2010\/02\/visual-studio-c-settings-stylecop","ID":"1749501237834311023","Published":"\/Date(1265981700000+0100)\/","Title":"Visual Studio: C#-settings & StyleCop","Updated":"\/Date(1265984452000+0100)\/"}]}